Object subclass: #Regex	instanceVariableNames: 'valor option1 option2 prefix subfix'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Regex methodsFor: 'accessing structure variables' stamp: 'NicolasHernandez 6/14/2018 19:25'!suffix	^subfix value.! !!Regex methodsFor: 'accessing structure variables' stamp: 'NicolasHernandez 6/14/2018 19:25'!option2	^option2 value.! !!Regex methodsFor: 'accessing structure variables' stamp: 'NicolasHernandez 6/14/2018 19:10'!b	valor := $b.! !!Regex methodsFor: 'accessing structure variables' stamp: 'NicolasHernandez 6/14/2018 19:10'!value	^valor.! !!Regex methodsFor: 'accessing structure variables' stamp: 'NicolasHernandez 6/14/2018 19:09'!a	valor := $a.! !!Regex methodsFor: 'accessing structure variables' stamp: 'NicolasHernandez 6/14/2018 19:25'!prefix	^prefix value.! !!Regex methodsFor: 'accessing structure variables' stamp: 'NicolasHernandez 6/14/2018 19:25'!option1	^option1 value.! !!Regex methodsFor: 'comparing' stamp: 'GuidoTripodi 6/21/2018 18:40'!= anotherRegex	^self value = anotherRegex value! !!Regex methodsFor: 'as yet unclassified' stamp: 'GuidoTripodi 6/21/2018 18:55'!c	valor := $c.! !!Regex methodsFor: 'as yet unclassified' stamp: 'NicolasHernandez 6/14/2018 19:18'!star: aRegex	valor := Regex a. ! !!Regex methodsFor: 'as yet unclassified' stamp: 'GuidoTripodi 6/21/2018 19:01'!star	^ Star repeating: self.! !!Regex methodsFor: 'copying' stamp: 'GuidoTripodi 6/21/2018 19:16'!, aRegex	prefix := self.	subfix := aRegex.	^Concat new create: self with: aRegex  .! !!Regex methodsFor: 'testing' stamp: 'GuidoTripodi 6/21/2018 19:07'!printString	self subclassResponsibility! !!Regex methodsFor: 'testing' stamp: 'GuidoTripodi 6/21/2018 18:54'!hasStar	self subclassResponsibility .! !!Regex methodsFor: 'logical operations' stamp: 'GuidoTripodi 6/21/2018 19:20'!| aRegex	^ Or new createOr: self with: aRegex! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Regex class	instanceVariableNames: ''!!Regex class methodsFor: 'accessing structure variables' stamp: 'GuidoTripodi 6/21/2018 18:57'!b	^ Simbol new b! !!Regex class methodsFor: 'accessing structure variables' stamp: 'GuidoTripodi 6/21/2018 18:57'!a	^ Simbol new a! !!Regex class methodsFor: 'as yet unclassified' stamp: 'NicolasHernandez 6/14/2018 19:17'!star: aRegex	^ self new star: aRegex.! !!Regex class methodsFor: 'local' stamp: 'GuidoTripodi 6/21/2018 18:57'!c	^ Simbol new c! !!Regex class methodsFor: 'requirements' stamp: 'GuidoTripodi 6/21/2018 18:57'!empty	^ Empty new.! !Regex subclass: #Concat	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Concat methodsFor: 'comparing' stamp: 'GuidoTripodi 6/21/2018 20:03'!match: aString	| string |	string := option1 printString , option2 printString.	^ string = aString. ! !!Concat methodsFor: 'as yet unclassified' stamp: 'GuidoTripodi 6/21/2018 19:18'!create: aRegex1 with: aRegex2	option1 := aRegex1.	option2 := aRegex2! !!Concat methodsFor: 'as yet unclassified' stamp: 'GuidoTripodi 6/21/2018 19:44'!length: aBlockClosure 	^ (option1 length: aBlockClosure) + (option2 length: aBlockClosure) .! !!Concat methodsFor: 'testing' stamp: 'GuidoTripodi 6/21/2018 19:13'!printString	^ (option1 printString , option2 printString)! !!Concat methodsFor: 'testing' stamp: 'GuidoTripodi 6/21/2018 18:54'!hasStar	^ option1 hasStar or: option2 hasStar! !Regex subclass: #Empty	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Empty methodsFor: 'testing' stamp: 'GuidoTripodi 6/21/2018 19:44'!length: aBlockClosure	^ 0! !!Empty methodsFor: 'testing' stamp: 'GuidoTripodi 6/21/2018 19:07'!printString	^ 'empty'! !!Empty methodsFor: 'testing' stamp: 'GuidoTripodi 6/21/2018 18:51'!hasStar	^ false! !!Empty methodsFor: 'comparing' stamp: 'GuidoTripodi 6/21/2018 19:46'!match: aString	^ aString = ''.! !Regex subclass: #Or	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Or methodsFor: 'testing' stamp: 'GuidoTripodi 6/21/2018 19:35'!length: aBlockClosure	^ 1! !!Or methodsFor: 'testing' stamp: 'GuidoTripodi 6/21/2018 19:23'!printString	^ '(' , option1 printString , '|' , option2 printString , ')'! !!Or methodsFor: 'testing' stamp: 'GuidoTripodi 6/21/2018 18:53'!hasStar	^ option1 hasStar or: option2 hasStar! !!Or methodsFor: 'as yet unclassified' stamp: 'GuidoTripodi 6/21/2018 19:20'!createOr: aSimbol with: aSimbol2 	option1 := aSimbol.	option2 := aSimbol2.! !!Or methodsFor: 'comparing' stamp: 'GuidoTripodi 6/21/2018 20:06'!match: aString	^ (option1 match: aString) or: (option2 match: aString)! !Regex subclass: #Simbol	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Simbol methodsFor: 'comparing' stamp: 'GuidoTripodi 6/21/2018 19:52'!match: aString	 aString size = 1 ifTrue: [ ^aString first = valor].	^ false.! !!Simbol methodsFor: 'testing' stamp: 'GuidoTripodi 6/21/2018 19:33'!length: aBlockClosure	^1.! !!Simbol methodsFor: 'testing' stamp: 'GuidoTripodi 6/21/2018 19:11'!printString	^ valor asString .! !!Simbol methodsFor: 'testing' stamp: 'GuidoTripodi 6/21/2018 18:46'!hasStar	^false.! !Regex subclass: #Star	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Star methodsFor: 'as yet unclassified' stamp: 'GuidoTripodi 6/21/2018 19:02'!with: aRegex 	valor := aRegex.! !!Star methodsFor: 'printing' stamp: 'GuidoTripodi 6/21/2018 19:25'!printString	^ '(' , valor printString , ')*'! !!Star methodsFor: 'comparing' stamp: 'GuidoTripodi 6/21/2018 20:43'!match: aString	^ aString isEmpty or: (valor match: aString )! !!Star methodsFor: 'testing' stamp: 'GuidoTripodi 6/21/2018 19:41'!length: aBlockClosure	^ aBlockClosure value: 0 value: Float infinity! !!Star methodsFor: 'testing' stamp: 'GuidoTripodi 6/21/2018 19:00'!hasStar	^ true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Star class	instanceVariableNames: ''!!Star class methodsFor: 'instance creation' stamp: 'GuidoTripodi 6/21/2018 19:05'!repeating: aRegex	^self new with: aRegex! !TestCase subclass: #TestEj1	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestEj1 methodsFor: 'tests' stamp: 'NicolasHernandez 6/14/2018 19:28'!test1_1_regex	|e a b aaa a_b ab|		e := Regex empty.	a := Regex a.	b := Regex b.	aaa := a star.	a_b := a | b.	ab := a , b.		self assert: e isNotNil.	self assert: a isNotNil.	self assert: b isNotNil.	self assert: a_b isNotNil.	self assert: aaa isNotNil.	self assert: ab isNotNil.		self assert: a value equals: $a.	self assert: b value equals: $b.	self assert: aaa value equals: a.	self assert: a_b option1 equals: a.	self assert: a_b option2 equals: b.	self assert: ab prefix equals: a.	self assert: ab suffix equals: b.! !TestCase subclass: #TestEj2	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestEj2 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/6/2018 03:48'!test2_1_hasStar	|e a b c aaa b_c aaab_c|		e := Regex empty.	a := Regex a.	b := Regex b.	c := Regex c.	aaa := a star.	b_c := b | c.	aaab_c := aaa , b_c.		self assert: aaa hasStar.	self assert: aaab_c hasStar.	self assert: e hasStar not.	self assert: a hasStar not.	self assert: b_c hasStar not.! !!TestEj2 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 21:53'!test2_2_printString	|e a b c aaa abc b_c aaab_c|		e := Regex empty.	a := Regex a.	b := Regex b.	c := Regex c.	aaa := a star.	abc := a , b , c.	b_c := b | c.	aaab_c := aaa , b_c.		self assert: e printString equals: 'empty'.	self assert: a printString equals: 'a'.	self assert: abc printString equals: 'abc'.	self assert: b_c printString equals: '(b|c)'.	self assert: aaa printString equals: '(a)*'.	self assert: aaab_c printString equals: '(a)*(b|c)'.! !TestCase subclass: #TestEj3	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestEj3 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 00:10'!test3_1_minLength	|e a b c aaa b_c aaab_c min|		e := Regex empty.	a := Regex a.	b := Regex b.	c := Regex c.	aaa := a star.	b_c := b | c.	aaab_c := aaa , b_c.	min := [:x :y | x min: y].		self assert: (aaa length: min) equals: 0.	self assert: (aaab_c length: min) equals: 1.	self assert: (e length: min) equals: 0.	self assert: (a length: min) equals: 1.	self assert: (b_c length: min) equals: 1.! !!TestEj3 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 00:09'!test3_2_maxLength	|e a b c aaa b_c aaab_c max|		e := Regex empty.	a := Regex a.	b := Regex b.	c := Regex c.	aaa := a star.	b_c := b | c.	aaab_c := aaa , b_c.	max := [:x :y | x max: y].		self assert: (aaa length: max) isInfinite.	self assert: (aaab_c length: max) isInfinite.	self assert: (e length: max) equals: 0.	self assert: (a length: max) equals: 1.	self assert: (b_c length: max) equals: 1.! !TestCase subclass: #TestEj4	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestEj4 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 00:07'!test4_4_or	|a b a_b|		a := Regex a.	b := Regex b.	a_b := a | b.		self assert: (a_b match: 'a').	self assert: (a_b match: 'b').	self assert: (a_b match: '') not.	self assert: (a_b match: 'ab') not.	self assert: (a_b match: 'ba') not.! !!TestEj4 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 00:06'!test4_3_concat	|a b ab|		a := Regex a.	b := Regex b.	ab := a , b.		self assert: (ab match: 'ab').	self assert: (ab match: '') not.	self assert: (ab match: 'a') not.	self assert: (ab match: 'aba') not.! !!TestEj4 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 00:06'!test4_2_char	|a b|		a := Regex a.	b := Regex b.		self assert: (a match: 'a').	self assert: (a match: '') not.	self assert: (a match: 'b') not.	self assert: (a match: 'ab') not.		self assert: (b match: 'b').	self assert: (b match: '') not.	self assert: (b match: 'a') not.	self assert: (b match: 'ba') not.! !!TestEj4 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/11/2018 22:32'!test4_6_match	|a b c b_c aaa aaab_c bbbb|		a := Regex a.	b := Regex b.	c := Regex c.	aaa := a star.	b_c := b | c.	aaab_c := aaa , b_c.	bbbb := b star , b.		self assert: (aaab_c match: 'b').	self assert: (aaab_c match: 'c').	self assert: (aaab_c match: 'ab').	self assert: (aaab_c match: 'ac').	self assert: (aaab_c match: 'aab').	self assert: (aaab_c match: 'aaac').	self assert: (bbbb match: 'b').	self assert: (bbbb match: 'bb').	self assert: (bbbb match: 'bbb').	self assert: (bbbb match: '') not.	self assert: (aaab_c match: '') not.	self assert: (aaab_c match: 'a') not.	self assert: (aaab_c match: 'aa') not.	self assert: (aaab_c match: 'aaa') not.	self assert: (aaab_c match: 'ba') not.	self assert: (aaab_c match: 'ca') not.! !!TestEj4 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 00:06'!test4_1_empty	|e|		e := Regex empty.		self assert: (e match: '').	self assert: (e match: 'a') not.! !!TestEj4 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 00:08'!test4_5_star	|a aaa|		a := Regex a.	aaa := a star.		self assert: (aaa match: '').	self assert: (aaa match: 'a').	self assert: (aaa match: 'aa').	self assert: (aaa match: ('a' repeat: (Random new nextInt: 10))).	self assert: (aaa match: 'b') not.	self assert: (aaa match: 'ab') not.	self assert: (aaa match: 'aab') not.! !